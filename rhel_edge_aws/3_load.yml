# file: 2_load.yml
---

- name: Wait for AWS AMIs to become initialized
  hosts: localhost
  gather_facts: no
  tasks:
    - ansible.builtin.wait_for:
        host: "{{ item }}"
        port: 22
        state: started
        timeout: 300
      with_items:
        - "{{ groups.rhel_nodes }}"
        - "{{ groups.tower_rhel_nodes }}"

- name: Configure repositories on all RHEL nodes
  become: yes
  remote_user: ec2-user
  hosts:
    - rhel_nodes
  gather_facts: yes
  roles:
    - role: subscription_manager 
    - role: firewalld
    - role: epel
  tasks:
    - name: add codeready-builder repo
      community.general.rhsm_repository:
        name: "{{ item }}"
      loop:
        - codeready-builder-for-rhel-8-x86_64-rpms
        - rhel-8-for-x86_64-appstream-rpms
      when: not cloud_access and ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8'

    - name: add codeready-builder rhui repo
      ansible.builtin.command: "dnf config-manager --set-enabled {{ item }}"
      loop:
        - codeready-builder-for-rhel-8-rhui-rpms
        - rhel-8-appstream-rhui-rpms
      when: cloud_access and ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8'

- name: Configure repositories on nodes
  become: yes
  remote_user: ec2-user
  hosts: le_node
  gather_facts: no
  roles:
    - role: LetsEncrypt

- name: Configure nodes for workshop
  become: yes
  remote_user: ec2-user
  hosts: rhel_nodes
  gather_facts: no
  tasks:
    - name: check to see if there is a 'System eth0' connection
      ansible.builtin.command: "nmcli con show 'System eth0'"
      register: eth0_result
      ignore_errors: yes

    - name: rename system eth0 interface
      ansible.builtin.command: "nmcli con mod 'System eth0' connection.id eth0"
      when: eth0_result.rc == 1

    - name: install required packages
      ansible.builtin.package:
        name: "{{ item }}"
        state: latest
      loop:
        - bash-completion
        - composer-cli
        - cowsay
        - figlet
        - golang
        - lorax-composer

    - name: install containers-tools
      ansible.builtin.command: "dnf -y module install container-tools"

    - name: add system user to weldr group
      ansible.builtin.user:
        name: ec2-user
        groups:
          - "weldr"
 
- name: Ensure python3-pip installed for powerline (RHEL 8)
  become: yes
  remote_user: ec2-user
  hosts: rhel_nodes
  gather_facts: no
  tasks:
    - ansible.builtin.package:
        name: python3-pip
        state: latest
      when: rhel_ver == 'rhel8'    

- name: Configure software on nodes
  become: yes
  remote_user: ec2-user
  hosts: rhel_nodes
  gather_facts: no
  tasks:
    - name: install git
      ansible.builtin.package:
        name: git
        state: latest
  roles:
    - role: system-user
    - role: powerline

- name: Configure web console (RHEL 7)
  become: yes
  remote_user: ec2-user
  hosts: rhel_nodes
  gather_facts: no
  roles:
    - role: wetty
      when: rhel_ver == 'rhel7'

- name: Configure web console (RHEL 8)
  become: yes
  remote_user: ec2-user
  hosts: rhel_nodes
  gather_facts: no
  roles:
    - role: cockpit
      when: rhel_ver == 'rhel8'

- name: Upgrade packages
  become: yes
  remote_user: ec2-user
  hosts:
    - rhel_nodes
  roles:
    - role: upgrade

- name: Re-enable SCL repo when upgrade disables it
  become: yes
  remote_user: ec2-user
  hosts:
    - rhel_nodes
  gather_facts: yes
  roles:
    - role: subscription_manager 

- name: Open firewalld ports on nodes
  become: yes
  remote_user: ec2-user
  hosts:
    - rhel_nodes
  gather_facts: yes
  tasks:
#    - name: open firewalld ports
#      ansible.posix.firewalld:
#        port: "{{ item }}"
#        permanent: yes
#        state: enabled
#      with_items:
#      - '8000/tcp'

    - name: open firewalld services
      ansible.posix.firewalld:
        service: "{{ item }}"
        permanent: yes
        state: enabled
      with_items:
      - 'http'
      - 'https'

    - name: restart firewalld service
      ansible.builtin.service:
        name: firewalld
        state: reloaded

- name: copy and install qemu
  become: yes
  remote_user: ec2-user
  hosts:
    - rhel_nodes
  gather_facts: yes
  tasks:
    - name: add codeready-builder repo
      community.general.rhsm_repository:
        name: codeready-builder-for-rhel-8-x86_64-rpms
      when: not cloud_access and ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8'

    - name: add codeready-builder rhui repo
      ansible.builtin.command: dnf config-manager --set-enabled codeready-builder-for-rhel-8-rhui-rpms
      when: cloud_access and ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8'

    - name: checkout code
      ansible.builtin.git:
        repo: https://github.com/ajacocks/qemu.git
        dest: ~ec2-user/edge-workshop

    - name: copy package
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/work/"
      with_fileglob:
        - "/build/rpmbuild/RPMS/x86_64/qemu-full*rpm"

    - name: find package
      ansible.builtin.find:
        paths: "/work"
        file_type: file
        patterns: "*.rpm"
      register: packages

    - name: install package
      ansible.builtin.dnf:
        name: "{{ item.path }}"
        disable_gpg_check: yes
        state: present
      loop: "{{ packages.files }}"

    - name: look up bin directory
      ansible.builtin.shell: rpm -ql qemu-full | grep bin | head -1 | sed 's]/bin.*]]'
      register: path

    - name: update bashrc with path
      ansible.builtin.lineinfile:
        path: "~ec2-user/.bashrc"
        regex: "^export PATH=.*"
        insertafter: EOF
        line: "export PATH={{ path.stdout }}/bin:~{{ system_user }}/.local/bin:$PATH"

    - name: update bashrc with manpath
      ansible.builtin.lineinfile:
        path: "~ec2-user/.bashrc"
        regex: "^export MANPATH=.*"
        insertafter: EOF
        line: "export MANPATH={{ path.stdout }}/share/man:$MANPATH"

- name: clone workshop repo
  become: yes
  remote_user: ec2-user
  hosts:
    - rhel_nodes
  gather_facts: yes
  tasks:

    - name: create build partition
      community.general.parted:
        device: /dev/nvme1n1
        number: 1
        fs_type: ext4
        state: present

    - name: create build filesystem
      community.general.filesystem:
        dev: /dev/nvme1n1p1
        fstype: ext4

    - name: create mountpoint
      ansible.builtin.file:
        path: "/work"
        state: directory
        mode: '0755'

    - name: mount build filesystem
      ansible.posix.mount:
        path: "/work"
        src: "/dev/nvme1n1p1"
        state: mounted
        fstype: ext4

    - name: create workshop directory
      ansible.builtin.file:
        path: "/work/workshop"
        state: directory
        owner: ec2-user
        group: ec2-user

    - name: checkout code
      ansible.builtin.git:
        repo: https://github.com/rlucente-se-jboss/demo-rfe.git
        dest: "/work/workshop/src/edge-workshop"
      become: no

    - name: link workshop dir to home directory
      ansible.builtin.file:
        src: "/work/workshop/src/edge-workshop"
        dest: "~ec2-user/workshop"
        state: link
      become: no

    - name: regenerate edge.ks
      ansible.builtin.shell:
        cmd: ". ./demo.conf && envsubst < edge.ks.orig > edge.ks"
        chdir: "~ec2-user/workshop"
      become: no

    - name: get VM_NET
      ansible.builtin.command: egrep ^VM_NET ~ec2-user/workshop/demo.conf
      register: vmnet

    - ansible.builtin.set_fact:
        hostip: "{{ vmnet.stdout | regex_replace('.*=','') | regex_replace('\\.[0-9]{1,3}/[0-9]{1,2}$','.2') }}"

    - name: add ip address to eth0
      ansible.builtin.command: "sudo nmcli con mod 'System eth0' +ipv4.addresses {{ hostip }}/24"

    - name: apply changed ip
      ansible.builtin.command: "sudo nmcli con up 'System eth0'"

    - name: create container registry
      ansible.builtin.file:
        path: "/var/lib/registry"
        state: directory

    - name: update registries.conf with dummy entry
      ansible.builtin.command: sed -i.bak '/\[registries.insecure\]/!b;n;cdummy'  /etc/containers/registries.conf

    - name: update dummy entry with hostip
      ansible.builtin.command: sed -i "s/dummy/registries = ['{{ hostip }}:5000']/g" /etc/containers/registries.conf

    - name: Populate service facts
      ansible.builtin.service_facts:

    - ansible.builtin.debug:
        var: ansible_facts.services

    - name: create and start registry service
      block:

      - name: get registry name for podman service
        ansible.builtin.command: >
          podman run --privileged -d --name registry \
          -p 5000:5000  -v /var/lib/registry:/var/lib/registry:Z \
          --restart=always docker.io/library/registry:2
        register: ctrid

      - name: generate systemd unit file for podman
        ansible.builtin.command: "podman generate systemd --new --files --name {{ ctrid.stdout }}"
        args:
          creates: container-registry.service

      - name: stop podman
        ansible.builtin.command: podman stop --all

      - name: remove all podman content
        ansible.builtin.command: podman rm -f --all

      - name: install container registry service
        ansible.builtin.copy:
          src: container-registry.service
          dest: /etc/systemd/system/
          remote_src: yes

      - name: apply systemd info
        ansible.builtin.command: restorecon -vFr /etc/systemd/system

      - name: start and enable container registry service
        systemd:
          name: container-registry.service
          enabled: yes
          state: started
          daemon_reload: yes
      when: ansible_facts.services['container-registry.service'] is not defined

    - name: stage rhel 8.3 boot ISO
      ansible.builtin.copy:
        src: "/build/rhel-8.3-x86_64-boot.iso"
        dest: "~ec2-user/workshop/"
      become: no
   
    - name: create osbuild work directories
      ansible.builtin.file:
        state: directory
        path: "{{ item }}"
        owner: _osbuild-composer
        group: _osbuild-composer
      loop:
        - "/work/workshop/cache/osbuild-composer"
        - "/work/workshop/cache/osbuild-worker"
        - "/work/workshop/lib/osbuild-composer"

    - name: apply proper context to directory
      community.general.sefcontext:
        target: "{{ item }}(/.*)?"
        setype: var_lib_t
        state: present
      loop:
        - "/work/workshop/cache/osbuild-composer"
        - "/work/workshop/cache/osbuild-worker"
        - "/work/workshop/lib/osbuild-composer"

    - name: Apply new SELinux file context to filesystem
      ansible.builtin.command: restorecon -irv /work/workshop
   
    - name: create osbuild-composer work directories
      ansible.builtin.file:
        state: directory
        path: "{{ item }}"
      loop:
        - "/etc/systemd/system/osbuild-composer.service.d"
        - "/etc/systemd/system/osbuild-worker@.service.d"

    - name: change osbuild composer cache and state directories
      ansible.builtin.copy:
        src: "osbuild-override.conf"
        dest: "/etc/systemd/system/osbuild-composer.service.d/override.conf"
        owner: root
        group: root
        mode: "0644"

    - name: change osbuild composer cache and state directories
      ansible.builtin.copy:
        src: "osbuild-worker-override.conf"
        dest: "/etc/systemd/system/osbuild-worker@.service.d/override.conf"
        owner: root
        group: root
        mode: "0644"

    - name: Restart service
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: osbuild-composer.socket

...
