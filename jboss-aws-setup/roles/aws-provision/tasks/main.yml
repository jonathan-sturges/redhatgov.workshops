---

#---------------------------------------------------
# Key
#---------------------------------------------------
- name: Check key exists
  ansible.builtin.stat:
    path: "{{ remote_user_key_file }}"
  register: stat_result

- name: Remove remote key
  amazon.aws.ec2_key: name="{{ remote_user_key }}" region="{{ aws_region }}" state=absent
  when: stat_result.stat.exists == False
  ignore_errors: yes

- name: Create new key
  amazon.aws.ec2_key: name="{{ remote_user_key }}" region="{{ aws_region }}" state=present
  register: ec2_key
  when: stat_result.stat.exists == False

- name: Create hidden directory
  ansible.builtin.file: path="{{ workspace }}" state=directory
  when: stat_result.stat.exists == False

- name: Copy key file
  ansible.builtin.copy:
    content: "{{ ec2_key.key.private_key }}"
    dest: "{{ remote_user_key_file }}"
    mode: 0400
  when: stat_result.stat.exists == False

- name: Set key permissions
  ansible.builtin.file:
   path: "{{ remote_user_key_file }}"
   state: touch
   mode: 0400
  when: stat_result.stat.exists == False

- name: Set ec2 key
  amazon.aws.ec2_key:
    name: "{{ remote_user_key }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    key_material: "{{ item }}"
    force: false
    state: present
  with_file: "{{ remote_user_key_file }}"
  register: ec2_key
  when: stat_result.stat.exists == True
  ignore_errors: yes

#---------------------------------------------------
# VPC
#---------------------------------------------------
- name: Create public vpc
  amazon.aws.ec2_vpc_net:
   name: "{{ vpc_tag }}"
   cidr_block: "{{ vpc_cidr_block }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   tags:
    Name: "{{ vpc_tag }}"
    namespace: "{{ namespace }}"
  register: vpc_facts

- name: Set vpc fact
  ansible.builtin.set_fact:
   vpc_id: "{{ vpc_facts['vpc']['id'] }}"

#---------------------------------------------------
# Subnet
#---------------------------------------------------
- name: Create public subnet
  amazon.aws.ec2_vpc_subnet:
   vpc_id: "{{ vpc_id }}"
   cidr: "{{ public_subnet_1_cidr }}"
   az: "{{ aws_region }}a"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   tags:
    Name: "{{ vpc_subnet_tag }}"
    namespace: "{{ namespace }}"
  register: subnet_facts

- name: Set subnet fact
  ansible.builtin.set_fact:
   public_subnet_id: "{{ subnet_facts['subnet']['id'] }}"

#---------------------------------------------------
# Gateway
#---------------------------------------------------
- name: Create internet gateway
  amazon.aws.ec2_vpc_igw:
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
  register: igw_facts

- name: Set gateway fact
  ansible.builtin.set_fact:
   igw_id: "{{ igw_facts['gateway_id'] }}"

#---------------------------------------------------
# Route Table
#---------------------------------------------------
- name: Create route table
  amazon.aws.ec2_vpc_route_table:
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   subnets:
    - "{{ public_subnet_id }}"
   routes:
    - dest: "{{ public_route_cidr_block }}"
      gateway_id: "{{ igw_id }}"
   tags:
     Name: "{{ vpc_route_tag }}"
     namespace: "{{ namespace }}"
  register: route_facts

- name: Set availability zone fact
  ansible.builtin.set_fact:
    availability_zone: "{{ subnet_facts['subnet']['availability_zone'] }}"

#---------------------------------------------------
# Groups
#---------------------------------------------------
- name: Create vpc security group
  ec2_group:
   name: "{{ ec2_security_group }}"
   description: "Default security group that allows all instances in the VPC to talk to each other over any port and protocol."
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   rules:
    - proto: "-1"
      from_port: "0"
      to_port: "0"
      group_name: "{{ ec2_security_group }}"
   rules_egress:
    - proto: "-1"
      from_port: "0"
      to_port: "0"
      group_name: "{{ ec2_security_group }}"

- name: Create ingress security group
  ec2_group:
   name: "{{ ec2_security_group_ingress }}"
   description: "Security group that allows public ingress to instances, HTTP, HTTPS and more."
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   rules:
     - proto: "tcp"
       from_port: "{{ http_port }}"
       to_port: "{{ http_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ http_proxy_port }}"
       to_port: "{{ http_proxy_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ https_port }}"
       to_port: "{{ https_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
     - proto: "tcp"
       from_port: "{{ https_proxy_port }}"
       to_port: "{{ https_proxy_port }}"
       cidr_ip: "{{ public_route_cidr_block }}"
   rules_egress: []

- name: Create egress security group
  ec2_group:
   name: "{{ ec2_security_group_egress }}"
   description: "This security group allows public egress from the instances for HTTP and HTTPS, which is needed for yum updates, git access etc etc."
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   rules_egress:
    - proto: "tcp"
      from_port: "{{ http_port }}"
      to_port: "{{ http_port }}"
      cidr_ip: "{{ public_route_cidr_block }}"
    - proto: "tcp"
      from_port: "{{ https_port }}"
      to_port: "{{ https_port }}"
      cidr_ip: "{{ public_route_cidr_block }}"

- name: Create ssh security group
  ec2_group:
   name: "{{ ec2_security_group_ssh }}"
   description: "Default security group that allows all instances in the VPC to talk to each other over any port and protocol."
   vpc_id: "{{ vpc_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   rules:
    - proto: "tcp"
      from_port: "{{ ssh_port }}"
      to_port: "{{ ssh_port }}"
      cidr_ip: "{{ public_route_cidr_block }}"
   rules_egress: []

#---------------------------------------------------
# AMI
#---------------------------------------------------
- name: Find default ami
  ec2_ami_find:
   name: "RHEL-7.3*"
   owner: "{{ redhat_owner_id }}"
   architecture: "x86_64"
   virtualization_type: "hvm"
   sort: "creationDate"
   sort_order: "descending"
   sort_end: 1
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
  register: "ami_find"
  when: redhat_owner_id is defined

- name: Set ami fact
  ansible.builtin.set_fact:
   ec2_image: "{{ ami_find['results'][0]['ami_id'] }}"
  when: (ec2_image is not defined) and
        (redhat_owner_id is defined)

- name: Find ami id
  ec2_ami_find:
   ami_id: "{{ ec2_image }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
  register: "ami_find"
  when: ec2_image is defined

- name: Set ami device
  ansible.builtin.set_fact:
    ec2_device: "{{ami_find['results'][0]['root_device_name']}}"

# - debug: msg="{{ ec2_image }}"
# - debug: msg="{{ ec2_device }}"

#---------------------------------------------------
# EC2
#---------------------------------------------------
- name: Launch ec2 instance
  ec2:
   instance_type: "{{ ec2_instance_type }}"
   image: "{{ ec2_image }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   wait: true
   key_name: "{{ remote_user_key }}"
   vpc_subnet_id: "{{ public_subnet_id }}"
   group: ['{{ ec2_security_group }}', '{{ ec2_security_group_ingress }}', '{{ ec2_security_group_egress }}', '{{ ec2_security_group_ssh }}']
   volumes:
    - device_name: "{{ ec2_device }}"
      volume_size: "{{ os_root_vol_size }}"
      volume_type: gp2
      delete_on_termination: true
    # - device_name: "{{ os_docker_block_device }}"
    #   volume_size: "{{ os_docker_vol_size }}"
    #   volume_type: gp2
    #   delete_on_termination: true
   count_tag:
    Name: "{{ ec2_tag }}"
   instance_tags:
    Name: "{{ ec2_tag }}"
    namespace: "{{ namespace }}"
    AppID: "{{ app_id }}"
    Role: "{{ role }}"
    Env: "{{ deploy_env }}"
    SemVer: "{{ release }}"
    Type: "{{ ec2_instance_type }}"
   exact_count: 1
  register: ec2_host

- ansible.builtin.debug: msg="{{ ec2_host['tagged_instances'][0]['id'] }}"

- name: Create elastic ip
  amazon.aws.ec2_eip:
   device_id: "{{ ec2_host['tagged_instances'][0]['id'] }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   release_on_disassociation: true
  register: ec2_elastic_ip

- name: Set ip facts
  ansible.builtin.set_fact:
   private_ip: "{{ ec2_host['tagged_instances'][0]['private_ip'] }}"
   public_ip: "{{ ec2_elastic_ip['public_ip'] }}"
   private_dns_name: "{{ ec2_host['tagged_instances'][0]['private_dns_name'] }}"

- name: Wait for SSH
  local_action: wait_for
                host={{ item }}
                port=22
                state=started
  with_items:
   - "{{public_ip}}"

#---------------------------------------------------
# Route53
#---------------------------------------------------
- name: Create private zone
  amazon.aws.route53_zone:
     zone: "{{ intranet }}"
     state: "present"
     vpc_id: "{{ vpc_id }}"
     vpc_region: "{{ aws_region }}"
     comment: "Internal zone for {{ namespace }}"
     aws_access_key: "{{ aws_access_key }}"
     aws_secret_key: "{{ aws_secret_key }}"
  register: private_zone

# - debug: msg="{{ private_zone }}"

- name: Set private zone id fact
  ansible.builtin.set_fact:
    private_zone_id: "{{ private_zone['result']['zone_id'] }}"

- name: Create private record
  amazon.aws.route53:
    hosted_zone_id: "{{ private_zone_id }}"
    zone: "{{ intranet }}"
    record: "{{ ec2_tag }}.{{ intranet }}"
    type: A
    ttl: 300
    value: "{{ private_ip }}"
    wait: yes
    vpc_id: "{{ vpc_id }}"
    private_zone: true
    command: "create"
    overwrite: yes
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"

- name: Create public record
  amazon.aws.route53:
    zone: "{{ domain }}"
    record: "{{ domain }}"
    type: A
    ttl: 300
    value: "{{ public_ip }}"
    wait: yes
    command: "create"
    overwrite: yes
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"

#---------------------------------------------------
# SSH
#---------------------------------------------------
- name: Generate ssh key
  ansible.builtin.user: "name={{ remote_user_name }} generate_ssh_key=yes"
  delegate_to: "{{ public_ip }}"
  remote_user: "{{ remote_user_name }}"

- name: Register public key
  ansible.builtin.shell: "cat ~/.ssh/id_rsa.pub"
  delegate_to: "{{ public_ip }}"
  remote_user: "{{ remote_user_name }}"
  register: "ec2_rsa_pub"

#---------------------------------------------------
# Inventory (in-memory)
#---------------------------------------------------
- name: Add host to group 'created_vms'
  ansible.builtin.add_host:
    name: "{{ item.ip }}"
    groups: created_vms
    instance_name: "{{ item.name }}"
  with_items:
    - { name: '{{ ec2_tag }}', ip: '{{ public_ip }}' }

- name: Add host to group 'created_nodes'
  ansible.builtin.add_host:
    name: "{{ item.ip }}"
    groups: created_nodes
    instance_name: "{{ item.name }}"
  with_items:
    - { name: '{{ ec2_tag }}', ip: '{{ public_ip }}' }
